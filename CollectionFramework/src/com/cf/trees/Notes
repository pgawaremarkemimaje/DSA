Binary Tree:
    - A binary tree is a tree data structure in which each node has at most two children,
    which are referred to as the left child and the right child.
    - A binary tree is a recursive data structure.
    - A binary tree is a collection of nodes where each node has a value,
    a reference to a left child, and a reference to a right child.
    - A binary tree is a tree data structure in which each node has at most two children,
    which are referred to as the left child and the right child.

    Ex of Binary Tree:
            1
           / \
          2   3
         / \    \
        4   5    6

    - In the above example, 1 is the root node, 2 is the left child of 1, 3 is the right child of 1,
    4 is the left child of 2, 5 is the right child of 2, and 6 is the right child of 3.

                 A
              /     \
            B         C
         /    \     /
        D      E   F

    - In the above example, A is the root node, B is the left child of A, C is the right child of A,
    D is the left child of B, E is the right child of B, and F is the left child of C.

-Binary Search Tree:
    - A binary search tree is a binary tree in which the value of the left child is
    less than the value of the parent node and the value of the right child is greater than the value of the parent node.
    - Each node in the binary search tree has a value, a reference to a left child, and a reference to a right child.
    - Example of Binary Search Tree:
            8
           / \
          3   10
         / \    \
        1   6    14
           / \   /
          4   7 13

    - In the above example, 8 is the root node, 3 is the left child of 8, 10 is the right child of 8,
    1 is the left child of 3, 6 is the right child of 3, 14 is the right child of 10, 4 is the left child of 6,
    7 is the right child of 6, and 13 is the left child of 14.

    ## Searching in BST:
        - To search an element in a binary search tree, we start from the root node.
        - If the element to be searched is less than the value of the root node, then we move to the left child.
        - If the element to be searched is greater than the value of the root node, then we move to the right child.
        - We repeat the above steps until we find the element or reach a null node.
        - If we reach a null node, then the element is not present in the binary search tree.
        - If we find the element, then we return the node containing the element.
        - Example of Searching in BST:
            - To search for the element 6 in the above binary search tree, we start from the root node 8.
            - Since 6 is less than 8, we move to the left child 3.
            - Since 6 is greater than 3, we move to the right child 6.
            - Since 6 is equal to 6, we return the node containing the element 6.
            - If the element is not present in the binary search tree, then we return null.

        - Algorithm:
            - If the root node is null, then return null.
            - If the value of the root node is equal to the element, then return the root node.
            - If the element is less than the value of the root node, then search in the left subtree.
            - If the element is greater than the value of the root node, then search in the right subtree.
            - If the element is not present in the binary search tree, then return null.

        - Pseudocode:
            Search(root, element):
                if root is null:
                    return null
                if root.value is equal to element:
                    return root
                if element is less than root.value:
                    return Search(root.left, element)
                if element is greater than root.value:
                    return Search(root.right, element)
                return null

    ## Insertion in BST:
        - To insert an element in a binary search tree, we start from the root node.
        - If the element to be inserted is less than the value of the root node, then we move to the left child.
        - If the element to be inserted is greater than the value of the root node, then we move to the right child.
        - We repeat the above steps until we reach a null node.
        - If we reach a null node, then we insert the element at that position.
        - Example of Insertion in BST:
            - To insert the element 5 in the above binary search tree, we start from the root node 8.
            - Since 5 is less than 8, we move to the left child 3.
            - Since 5 is greater than 3, we move to the right child 6.
            - Since 6 is less than 5, we insert the element 5 as the right child of 6.
            - The resulting binary search tree is shown below:
                    8
                   / \
                  3   10
                 / \    \
                1   6    14
                   / \   /
                  4   7 13
                     /
                    5

        - Algorithm:
            - If the root node is null, then create a new node with the element and return the new node.
            - If the element is less than the value of the root node, then insert in the left subtree.
            - If the element is greater than the value of the root node, then insert in the right subtree.
            - Return the root node.

        - Pseudocode:
            Insert(root, element):
                if root is null:
                    return new Node(element)
                if element is less than root.value:
                    root.left = Insert(root.left, element)
                if element is greater than root.value:
                    root.right = Insert(root.right, element)
                return root

    ## Deletion in BST:
    - To delete an element from a binary search tree, we first search for the element to be deleted.
    - If the element is not present in the binary search tree, then we return the root node.
    - If the element is present in the binary search tree, then we perform the following steps:
        - If the node to be deleted is a leaf node, then we simply remove the node.
        - If the node to be deleted has only one child, then we replace the node with its child.
        - If the node to be deleted has two children, then we find the inorder successor or inorder predecessor of the node.
        - We replace the node to be deleted with the inorder successor or inorder predecessor.
        - We delete the inorder successor or inorder predecessor from its original position.
    - Example of Deletion in BST:
        - To delete the element 6 from the above binary search tree, we start from the root node 8.
        - Since 6 is less than 8, we move to the left child 3.
        - Since 6 is greater than 3, we move to the right child 6.
        - Since 6 is equal to 6, we delete the node containing the element 6.
        - The resulting binary search tree is shown below:
                8
               / \
              3   10
             / \    \
            1   7    14
               /     /
              4     13

    - Algorithm:
        - If the root node is null, then return null.
        - If the element is less than the value of the root node, then delete in the left subtree.
        - If the element is greater than the value of the root node, then delete in the right subtree.
        - If the element is equal to the value of the root node, then perform the following steps:
            - If the node to be deleted is a leaf node, then return null.
            - If the node to be deleted has only one child, then return the child node.
            - If the node to be deleted has two children, then find the inorder successor or inorder predecessor.
            - Replace the node to be deleted with the inorder successor or inorder predecessor.
            - Delete the inorder successor or inorder predecessor from its original position.
        - Return the root node.

    - Pseudocode:
        Delete(root, element):
            if root is null:
                return null
            if element is less than root.value:
                root.left = Delete(root.left, element)
            if element is greater than root.value:
                root.right = Delete(root.right, element)
            if element is equal to root.value:
                if root.left is null and root.right is null:
                    return null
                if root.left is null:
                    return root.right
                if root.right is null:
                    return root.left
                temp = FindMin(root.right)
                root.value = temp.value
                root.right = Delete(root.right, temp.value)
            return root

        FindMin(root):
            while root.left is not null:
                root = root.left
            return root


    ## Height of BST:
        - The height of a binary search tree is the maximum depth of the tree.
        - The height of a binary search tree is the length of the longest path from the root node to a leaf node.
        - The height of a binary search tree is the number of edges on the longest path from the root node to a leaf node.
        - The height of a binary search tree is the maximum level of any node in the tree.

        - Example of Height of BST:
            - The height of the binary search tree shown below is 3.
                    8
                   / \
                  3   10
                 / \    \
                1   6    14
                   / \   /
                  4   7 13

        - Algorithm:
            - If the root node is null, then return -1.
            - Calculate the height of the left subtree.
            - Calculate the height of the right subtree.
            - Return the maximum of the height of the left subtree and the height of the right subtree plus 1.

        - Pseudocode:
            Height(root):
                if root is null:
                    return -1
                leftHeight = Height(root.left)
                rightHeight = Height(root.right)
                return max(leftHeight, rightHeight) + 1

    ## Traversal in BST:
    - Traversal in a binary search tree is the process of visiting all the nodes in the tree in a specific order.
    - There are three types of traversal in a binary search tree:
        - Inorder Traversal
        - Preorder Traversal
        - Postorder Traversal